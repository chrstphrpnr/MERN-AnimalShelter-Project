!! BACKEND !!

ForgotPassword

config/config.env
1.
    SMTP_HOST = smtp.mailtrap.io
    SMTP_PORT = 2525
    SMTP_EMAIL = 4920ee743e9bde
    SMTP_PASSWORD = b4e4189b747323
    SMTP_FROM_EMAIL = noreply@gmail.com
    SMTP_FROM_NAME = admin


/utils/sendEmail.js
1.
    const nodemailer = require('nodemailer');
    const sendEmail = async options => {
        const transporter = nodemailer.createTransport({
            host: process.env.SMTP_HOST,
            port: process.env.SMTP_PORT,
            auth: {
                user: process.env.SMTP_EMAIL,
                pass: process.env.SMTP_PASSWORD
            }
        });

        const message = {
            from: `${process.env.SMTP_FROM_NAME} <${process.env.SMTP_FROM_EMAIL}>`,
            to: options.email,
            subject: options.subject,
            text: options.message,
            html: options.html
        }

        await transporter.sendMail(message)
    }

module.exports = sendEmail;


controllers/authController
1.
    //Forgot Password
    exports.forgotPassword = async (req, res, next) => {

    const user = await User.findOne({ email: req.body.email });

    if (!user) {
        return next(new ErrorHandler('User not found with this email', 404));
    }

    // Get reset token
    const resetToken = user.getResetPasswordToken();

    await user.save({ validateBeforeSave: false });

    // Create reset password url
    
    const resetUrl = `${process.env.FRONTEND_URL}/password/reset/${resetToken}`;

    const message = `<p>Your password reset token is as follow:\n\n<a href="${resetUrl}">Reset Password</a>\n\nIf you have not requested this email, then ignore it.</p>`
    const html =  `<p>Your password reset token is as follow:\n\n<a href="${resetUrl}">Reset Password</a>\n\nIf you have not requested this email, then ignore it.</p>`
    
    try {

        await sendEmail({
            email: user.email,
            subject: 'Animal Shelter User Password Recovery',
            message,
            html
             
        })

        res.status(200).json({
            success: true,
            message: `Email sent to: ${user.email}`
        })

    } catch (error) {
        user.resetPasswordToken = undefined;
        user.resetPasswordExpire = undefined;

        await user.save({ validateBeforeSave: false });

        return next(new ErrorHandler(error.message, 500))
    }

}

// Reset Password   =>  /api/v1/password/reset/:token
    exports.resetPassword = async (req, res, next) => {

        // Hash URL token
        const resetPasswordToken = crypto.createHash('sha256').update(req.params.token).digest('hex')

        const user = await User.findOne({
            resetPasswordToken,
            resetPasswordExpire: { $gt: Date.now() }
        })

        if (!user) {
            return next(new ErrorHandler('Password reset token is invalid or has been expired', 400))
        }

        if (req.body.password !== req.body.confirmPassword) {
            return next(new ErrorHandler('Password does not match', 400))
        }

        // Setup new password
        user.password = req.body.password;

        user.resetPasswordToken = undefined;
        user.resetPasswordExpire = undefined;

        await user.save();

        sendToken(user, 200, res);

    }

//Return User Details
exports.getUserProfile = async (req, res, next) => {
    const user = await User.findById(req.user.id);

    res.status(200).json({
        success: true,
        user
    })
}

//Update Password
exports.updatePassword = async (req, res, next) => {
    const user = await User.findById(req.user.id).select('password');

    // Check previous user password
    const isMatched = await user.comparePassword(req.body.oldPassword)
    if (!isMatched) {
        return next(new ErrorHandler('Old password is incorrect'));
    }

    user.password = req.body.password;
    await user.save();

    sendToken(user, 200, res)

}


// Update user profile   =>   /api/v1/me/update
exports.updateProfile = async (req, res, next) => {
    const newUserData = {
        name: req.body.name,
        email: req.body.email
    }

    // Update avatar
    // if (req.body.avatar !== '') {
    //     const user = await User.findById(req.user.id)

    //     const image_id = user.avatar.public_id;
    //     const res = await cloudinary.uploader.destroy(image_id);

    //     const result = await cloudinary.uploader.upload(req.body.avatar, {
    //         folder: 'avatars',
    //         width: 150,
    //         crop: "scale"
    //     })

    //     newUserData.avatar = {
    //         public_id: result.public_id,
    //         url: result.secure_url
    //     }
    // }

    const user = await User.findByIdAndUpdate(req.user.id, newUserData, {
        new: true,
        runValidators: true,
        // useFindAndModify: false
    })

    res.status(200).json({
        success: true
    })
}

// Get all users   =>   /api/v1/admin/users
exports.allUsers = async (req, res, next) => {
    const users = await User.find();

    res.status(200).json({
        success: true,
        users
    })
}

// Get user details   =>   /api/v1/admin/user/:id
exports.getUserDetails = async (req, res, next) => {
    const user = await User.findById(req.params.id);

    if (!user) {
        return next(new ErrorHandler(`User does not found with id: ${req.params.id}`))
    }

    res.status(200).json({
        success: true,
        user
    })
}
// Get update user details   =>   /api/v1/admin/user/:id
exports.updateUser = async (req, res, next) => {
    const newUserData = {
        name: req.body.name,
        email: req.body.email,
        role: req.body.role
    }

    const user = await User.findByIdAndUpdate(req.params.id, newUserData, {
        new: true,
        runValidators: true,
        
    })

    res.status(200).json({
        success: true
    })
}

// Delete user   =>   /api/v1/admin/user/:id
exports.deleteUser = async (req, res, next) => {
    const user = await User.findById(req.params.id);

    if (!user) {
        return next(new ErrorHandler(`User does not found with id: ${req.params.id}`))
    }

  
    await user.remove();

    res.status(200).json({
        success: true,
    })
}

routes/auth.js
1.
    const { isAuthenticatedUser, authorizeRoles } = require('../middlewares/auth');

    const { registerUser,
		loginUser,
		logout,
		forgotPassword,
		resetPassword,
		getUserProfile,
		updatePassword,
		updateProfile,
        allUsers,
		getUserDetails,
		updateUser,
	    deleteUser
	} = require('../controllers/authController');

        //Get Profile
        router.route('/me').get(isAuthenticatedUser, getUserProfile);
        //Update Profile
        router.route('/me/update').put(isAuthenticatedUser, updateProfile)



        //Forgot Password
        router.route('/password/forgot').post(isAuthenticatedUser, forgotPassword);
        //Reset Password
        router.route('/password/reset/:token').put(isAuthenticatedUser, resetPassword);
        //Update Password
        router.route('/password/update').put(isAuthenticatedUser, updatePassword);



        //Admin Function for Users

        //Show All Users
        router.route('/admin/users').get(isAuthenticatedUser, authorizeRoles('admin'), allUsers)

        //Get, Update, and Delete Function for Users by Admin 
        router.route('/admin/users/:id')
            .get(isAuthenticatedUser, authorizeRoles('admin'), getUserDetails)
            .put(isAuthenticatedUser, authorizeRoles('admin'), updateUser)
            .delete(isAuthenticatedUser, authorizeRoles('admin'), deleteUser)

